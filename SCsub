#!/usr/bin/env python
Import('env')

env_module = env.Clone()

thirdparty_dir = 'thirdparty/anl/'
thirdparty_dirs = [
    thirdparty_dir + 'VM/',
    thirdparty_dir + 'Expression/',
    thirdparty_dir + 'Imaging/',
    thirdparty_dir + 'Processing/',
]
env_module.Append(CPPPATH=thirdparty_dirs)

# Configure

# Upstream uses C++11
if (not env.msvc):
    env_module.Append(CXXFLAGS=['-std=c++11'])

# ANL sources
env_thirdparty = env_module.Clone()
for d in thirdparty_dirs:
    env_thirdparty.add_source_files(env.modules_sources, d + '*.cpp')
    
# Suppress warnings
env_thirdparty.disable_warnings()
if env.msvc:
    suppress_multiple_copy_constructors = '/wd4521'
    env_thirdparty.Append(CXXFLAGS=[suppress_multiple_copy_constructors])

# Optional, the following defines can be included from command line like so:
# scons define=ANL_LONG_PERIOD_HASHING

# ANL_LONG_PERIOD_HASHING
#   limited to 256.0 by default

# ANL_EXPRESSION_BUILDER_CAMELCASE
#   use camelCase by default instead of snake_case for noise expressions

for key, value in ARGLIST:
    if key == 'define':
        env_module.Append(CPPDEFINES=[value])

# Module sources
env_module.add_source_files(env.modules_sources, '*.cpp')
env_module.add_source_files(env.modules_sources, 'plugins/*.cpp')

Export('env_module')
